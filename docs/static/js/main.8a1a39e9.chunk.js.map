{"version":3,"sources":["Components/Title/Title.js","Components/Creator/Creator.js","Components/Code/Code.js","Components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["title","Grid","item","xs","className","Creator","noValidate","autoComplete","id","type","name","placeholder","required","value","htmlFor","form","onClick","e","nameComp","document","getElementById","typeOfComp","getElementsByName","preventDefault","innerHTML","i","length","checked","Code","Clipboard","style","color","data-clipboard-target","fileCopied","querySelector","opacity","setTimeout","Layout","Container","fixed","Title","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oUAWeA,EARD,WACV,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,UAAU,SACzB,oDC2EGC,G,MA9EC,WA2CZ,OACI,0BAAMC,YAAU,EAACC,aAAa,MAAMC,GAAG,cACnC,yBAAKJ,UAAU,QACX,2BACIK,KAAK,OACLD,GAAG,gBACHE,KAAK,gBACLC,YAAY,iBAAiBC,UAAQ,KAE7C,yBAAKR,UAAU,QACX,2BACIK,KAAK,QACLD,GAAG,QACHK,MAAM,QACNH,KAAK,OAAOE,UAAQ,IACxB,2BAAOE,QAAQ,SAAf,SACA,2BACIL,KAAK,QACLD,GAAG,WACHK,MAAM,WACNH,KAAK,OAAOE,UAAQ,IACxB,2BAAOE,QAAQ,YAAf,aAEJ,yBAAKV,UAAU,QACX,4BACIK,KAAK,SACLI,MAAM,SACNE,KAAK,aACLC,QAtEhB,SAAwBC,GACpB,IAAMC,EAAWC,SAASC,eAAe,iBAAiBP,MACtDQ,EAAaF,SAASG,kBAAkB,QAE5C,GAAiB,KAAbJ,EAGA,OAFAD,EAAEM,iBACFJ,SAASC,eAAe,UAAUI,UAAY,wBACvC,EAEP,IAAK,IAAIC,EAAI,EAAGC,EAASL,EAAWK,OAAQD,EAAIC,EAAQD,IACpD,GAAIJ,EAAWI,GAAGE,QAAS,CACvBN,EAAaA,EAAWI,GAAGZ,MAC3B,MAQRM,SAASC,eAAe,UAAUI,UADnB,UAAfH,EACA,sFAEYH,EAFZ,iRAQqBA,EARrB,uBAWA,uEAEYA,EAFZ,6KAMqBA,EANrB,yBAmCI,c,kCClCDU,G,MA9BF,WAaT,OAZA,IAAIC,IAAU,YAaV,kBAAC5B,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACX,yBAAKC,UAAU,cAAf,gBACA,yBAAKI,GAAG,WAAWsB,MAAO,CAAEC,MAAO,SAC/B,4BACI3B,UAAU,UACV4B,wBAAsB,UACtBhB,QAhBhB,WACI,IAAMiB,EAAad,SAASe,cAAc,eAC1CD,EAAWH,MAAMK,QAAU,EAC3BC,WACI,WACIH,EAAWH,MAAMK,QAAU,GAC5B,OAYK,kBAAC,IAAD,OAEJ,yBAAK3B,GAAG,UAAR,+DCXD6B,G,MAVA,WACb,OACE,kBAACC,EAAA,EAAD,CAAWlC,UAAU,YAAYmC,OAAK,GACpC,kBAACC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCFSC,MARf,WACE,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,QCKcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS7B,SAASC,eAAe,SD2H3C,kBAAmB6B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8a1a39e9.chunk.js","sourcesContent":["import React from \"react\";\nimport Grid from '@material-ui/core/Grid';\n\nconst title = () => {\n    return (\n        <Grid item xs={12} className='title'>\n            <h1>myComponentCreator</h1>\n        </Grid>\n    )\n}\n\nexport default title\n","import React from 'react';\nimport './Creator.css'\n\nconst Creator = () => {\n    function getNameHandler(e) {\n        const nameComp = document.getElementById('componentName').value\n        let typeOfComp = document.getElementsByName('type');\n\n        if (nameComp === '') {\n            e.preventDefault();\n            document.getElementById('result').innerHTML = 'Please choose a name'\n            return false;\n        } else {\n            for (var i = 0, length = typeOfComp.length; i < length; i++) {\n                if (typeOfComp[i].checked) {\n                    typeOfComp = typeOfComp[i].value;\n                    break;\n                }\n            }\n        }\n\n\n\n        if (typeOfComp === 'class') {\n            document.getElementById('result').innerHTML =\n                `import React, { Component } from 'react'; <br/><br/>\n                class ${nameComp} extends Component { <br />\n                    &emsp;render(){<br />\n                        &emsp;&emsp;return ( <br />\n                        &emsp;&emsp;) <br />\n                    &emsp;}<br />\n                }<br />\n                export default ${nameComp};\n                `\n        } else {\n            document.getElementById('result').innerHTML =\n                `import React from 'react'; <br/><br/>\n                const ${nameComp} = () => { <br />\n                        &emsp;return ( <br />\n                        &emsp;) <br />\n                }<br />\n                export default ${nameComp};\n                `\n        }\n    }\n\n    return (\n        <form noValidate autoComplete=\"off\" id='createComp' >\n            <div className='item'>\n                <input\n                    type=\"text\"\n                    id=\"componentName\"\n                    name=\"componentName\"\n                    placeholder=\"Component Name\" required />\n            </div>\n            <div className='item'>\n                <input\n                    type=\"radio\"\n                    id=\"class\"\n                    value='class'\n                    name=\"type\" required />\n                <label htmlFor=\"class\">class</label>\n                <input\n                    type=\"radio\"\n                    id=\"function\"\n                    value='function'\n                    name=\"type\" required />\n                <label htmlFor=\"function\">function</label>\n            </div>\n            <div className='item'>\n                <button\n                    type=\"button\"\n                    value=\"Submit\"\n                    form='createComp'\n                    onClick={getNameHandler}>\n                    Submit\n                </button>\n            </div>\n        </form >\n    )\n}\nexport default Creator;","import React from 'react'\nimport Grid from '@material-ui/core/Grid';\nimport Clipboard from 'clipboard';\nimport Filecopy from '@material-ui/icons/FileCopy'\nimport './Code.css'\n\nconst Code = () => {\n    new Clipboard('.copyBtn');\n\n\n    function copyStatus() {\n        const fileCopied = document.querySelector('.fileCopied');\n        fileCopied.style.opacity = 1\n        setTimeout(\n            function () {\n                fileCopied.style.opacity = 0\n            }, 1000)\n    }\n\n    return (\n        <Grid item xs={12}>\n            <div className='fileCopied'>Text Copied!</div>\n            <div id='terminal' style={{ color: '#FFF' }} >\n                <button\n                    className='copyBtn'\n                    data-clipboard-target=\"#result\"\n                    onClick={copyStatus}\n                >\n                    <Filecopy />\n                </button>\n                <div id='result'>Choose your component name and type (Class or Function)</div>\n            </div>\n        </Grid >\n    )\n}\n\nexport default Code;","import React from \"react\";\nimport Container from '@material-ui/core/Container';\nimport Title from '../Title/Title'\nimport Creator from '../Creator/Creator'\n\nimport Code from '../Code/Code'\n\nimport \"./Layout.css\";\n\nconst Layout = () => {\n  return (\n    <Container className='container' fixed>\n      <Title />\n      <Creator />\n      <Code />\n    </Container >\n  );\n};\n\nexport default Layout;\n","import React from \"react\";\nimport \"./App.css\";\nimport Layout from \"./Components/Layout/Layout\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}